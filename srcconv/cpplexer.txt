\s*([a-zA-Z_][0-9a-zA-Z_]*)\s*:\s*(.*)
key: \s*([a-zA-Z_][0-9a-zA-Z_]*)\s*:
value: \s*([\S]+)
LineComment: (\s*.*?)\s*(//.*)
BlockCommentIn: (.*?)(/\*)
BlockCommentOut: (.*?\*/)(.*)

/**
 * 字句解析定義。
 * 先頭の 3 行で、key, value, comment の正規表現を定義する。
 * 例: key : value SP comment
 *     \s*([a-zA-Z_][0-9a-zA-Z_]*)\s*:\s*
 *     ([\S]*)\s*
 *     (.*)
 * 
 * @author  1.0 2005/03/16 matsushima h2javac
 * @author  1.1 2006/07/19 matsushima cpp2javac
 * @author  0.0.1.001 2010/04/29 matsushima
 * @version 0.0.1.001 2010/04/29 matsushima
 * @since   0.0.1.001 2010/04/29 matsushima
 * 
 * $Id: lexer.txt,v 1.7 2010/05/23 18:36:39 matsushima Exp $
 * $Log: lexer.txt,v $
 * Revision 1.7  2010/05/23 18:36:39  matsushima
 * 検索
 *
 * Revision 1.6  2010/05/19 14:59:02  matsushima
 * 字句解析定義を読み込み修正
 *
 * Revision 1.4  2010/05/13 13:41:14  matsushima
 * 構文解析定義読み込み
 *
 * Revision 1.3  2010/05/06 16:05:54  matsushima
 * 構文解析
 *
 * Revision 1.2  2010/05/03 19:25:27  matsushima
 * 構文解析
 *
 * Revision 1.1  2010/05/01 20:20:41  matsushima
 * 新規
 * 字句解析
 * 構文解析(ハードコーディング)
 *
 */

space           : \s+
comment_block   : /\*([^\*]|\*[^/])*\*/
comment_line    : \/\/.*(\n|\r\n|\r)? // \/\/.*(\n|\r\n|\r|\u0085|\u2028|\u2029)?
IntegerLiteral  : [1-9][0-9]*
IntegerLiteral  : [0-9]+
IntegerLiteral  : 0x[0-9]+
IntegerLiteral  : 0X[0-9]+
CharacterLiteral: '([^'\\]|\\.)*'
StringLiteral   : "([^"\\]|\\.)*"
BooleanLiteral  : true(?=([^a-zA-Z_0-9])|$)
BooleanLiteral  : false(?=([^a-zA-Z_0-9])|$)
NullLiteral     : null(?=([^a-zA-Z_0-9])|$)

keyword:
	abstract(?=([^a-zA-Z_0-9])|$)
	asm(?=([^a-zA-Z_0-9])|$)
	assert(?=([^a-zA-Z_0-9])|$)
	auto(?=([^a-zA-Z_0-9])|$) / *C*/
	bad_cast(?=([^a-zA-Z_0-9])|$) / *C*/
	bad_typeid(?=([^a-zA-Z_0-9])|$) / *C*/
	bool(?=([^a-zA-Z_0-9])|$) / *C*/
	// *J*/boolean(?=([^a-zA-Z_0-9])|$)
	break(?=([^a-zA-Z_0-9])|$)
	case(?=([^a-zA-Z_0-9])|$)
	catch(?=([^a-zA-Z_0-9])|$)
	char(?=([^a-zA-Z_0-9])|$)
	class(?=([^a-zA-Z_0-9])|$)
	const_cast(?=([^a-zA-Z_0-9])|$) / *C*/
	const(?=([^a-zA-Z_0-9])|$)
	continue(?=([^a-zA-Z_0-9])|$)
	default(?=([^a-zA-Z_0-9])|$)
	delete(?=([^a-zA-Z_0-9])|$) / *C*/
	double(?=([^a-zA-Z_0-9])|$)
	do(?=([^a-zA-Z_0-9])|$)
	dynamic_cast(?=([^a-zA-Z_0-9])|$) / *C*/
	else(?=([^a-zA-Z_0-9])|$)
	enum(?=([^a-zA-Z_0-9])|$)
	except(?=([^a-zA-Z_0-9])|$) / *C*/
	explicit(?=([^a-zA-Z_0-9])|$) / *C*/
	extern(?=([^a-zA-Z_0-9])|$) / *C*/
	constly(?=([^a-zA-Z_0-9])|$)
	const(?=([^a-zA-Z_0-9])|$)
	float(?=([^a-zA-Z_0-9])|$)
	for(?=([^a-zA-Z_0-9])|$)
	friend(?=([^a-zA-Z_0-9])|$) / *C*/
	goto(?=([^a-zA-Z_0-9])|$)
	if(?=([^a-zA-Z_0-9])|$)
	import(?=([^a-zA-Z_0-9])|$)
	inline(?=([^a-zA-Z_0-9])|$) / *C*/
	int(?=([^a-zA-Z_0-9])|$)
	long(?=([^a-zA-Z_0-9])|$)
	mutable(?=([^a-zA-Z_0-9])|$) / *C*/
	namespace(?=([^a-zA-Z_0-9])|$) / *C*/
	native(?=([^a-zA-Z_0-9])|$)
	new(?=([^a-zA-Z_0-9])|$)
	operator(?=([^a-zA-Z_0-9])|$) / *C*/
	package(?=([^a-zA-Z_0-9])|$)
	private(?=([^a-zA-Z_0-9])|$)
	protected(?=([^a-zA-Z_0-9])|$)
	public(?=([^a-zA-Z_0-9])|$)
	register(?=([^a-zA-Z_0-9])|$) / *C*/
	reinterpret_cast(?=([^a-zA-Z_0-9])|$) / *C*/
	return(?=([^a-zA-Z_0-9])|$)
	short(?=([^a-zA-Z_0-9])|$)
	signed(?=([^a-zA-Z_0-9])|$) / *C*/
	sizeof(?=([^a-zA-Z_0-9])|$) / *C*/
	static_cast(?=([^a-zA-Z_0-9])|$) / *C*/
	static(?=([^a-zA-Z_0-9])|$)
	strictfp(?=([^a-zA-Z_0-9])|$)
	struct(?=([^a-zA-Z_0-9])|$) / *C*/
	super(?=([^a-zA-Z_0-9])|$)
	switch(?=([^a-zA-Z_0-9])|$)
	synchronized(?=([^a-zA-Z_0-9])|$)
	template(?=([^a-zA-Z_0-9])|$) / *C*/
	this(?=([^a-zA-Z_0-9])|$)
	throws(?=([^a-zA-Z_0-9])|$)
	throw(?=([^a-zA-Z_0-9])|$)
	transient(?=([^a-zA-Z_0-9])|$)
	try(?=([^a-zA-Z_0-9])|$)
	type_info(?=([^a-zA-Z_0-9])|$) / *C*/
	typedef(?=([^a-zA-Z_0-9])|$) / *C*/
	typeid(?=([^a-zA-Z_0-9])|$) / *C*/
	typename(?=([^a-zA-Z_0-9])|$) / *C*/
	union(?=([^a-zA-Z_0-9])|$) / *C*/
	unsigned(?=([^a-zA-Z_0-9])|$) / *C*/
	using(?=([^a-zA-Z_0-9])|$) / *C*/
	virtual(?=([^a-zA-Z_0-9])|$) / *C*/
	void(?=([^a-zA-Z_0-9])|$)
	volatile(?=([^a-zA-Z_0-9])|$)
	while(?=([^a-zA-Z_0-9])|$)

symbol:
	\+\+    // ++
	\+=     // +=
	\+      // +
	\->    // -> / *C*/
	\-\-    // --
	\-=     // -=
	\-      // -
	\*=     // *=
	\*      // *
	/=      // /=
	/       // /
	%=      // %=
	%       // %
	\~      // ~
	\&\&    // &&
	\&=     // &=
	\&      // &
	\|\|    // ||
	\|=     // |=
	\|      // |
	\^=     // ^=
	\^      // ^
	==      // ==
	=       // =
	\!=     // !=
	\!      // !
	<<=     // <<=
	<<      // <<
	<=      // <=
	\<       // <
	>>>=    // >>>=
	>>>     // >>>
	>>=     // >>=
	>>      // >>
	>=      // >=
	>       // >
	\(      // (
	\)      // )
	\{      // {
	\}      // }
	\[      // [
	\]      // ]
	\?      // ?
	:       // :
	\.\.\.  // ...
	\.      // .
	,       // ,
	;       // ;
	@       // @
	#      // # / *C*/

IDENTIFIER : [a-zA-Z_][a-zA-Z_0-9]*
