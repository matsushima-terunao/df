\s*([a-zA-Z_][0-9a-zA-Z_]*)\s*:\s*(.*)\s*
key: \s*([a-zA-Z_][0-9a-zA-Z_]*)\s*:\s*
value: \s*([\(\)\[\]\{\}\|]|[a-zA-Z_][0-9a-zA-Z_]*|\"(([^"\\]|\\.)*)"|[^0-9a-zA-Z_\(\)\[\]\{\}\|\s]+)\s*
LineComment: (\s*.*)\s*(//+.*)
BlockCommentIn: (.*)(/\*.*)
BlockCommentOut: (.*\*/)(.*)

/**
 * 構文解析定義。
 * 先頭の 3 行で、key, value, comment の正規表現を定義する。
 * 例: key : value "value" (value | value) [value] {value} ...
 *     value           : 字句解析定義または構文解析定義の key
 *     "value"         : 字句解析定義の value に一致した文字列
 *     value | value   : 選択
 *     [value]         : 0 または 1 回発生
 *     {value}         : 0 回以上発生
 * 
 * @see http://java.sun.com/docs/books/jls/third_edition/html/syntax.html
 * @author  1.0 2005/03/24 matsushima h2javac
 * @author  1.1 2006/07/19 matsushima cpp2javac
 * @author  0.0.1.001 2010/05/02 matsushima
 * @version 0.0.1.001 2010/05/02 matsushima
 * @since   0.0.1.001 2010/05/02 matsushima
 * 
 * $Id: parser.txt,v 1.10 2010/05/23 18:36:36 matsushima Exp $
 * $Log: parser.txt,v $
 * Revision 1.10  2010/05/23 18:36:36  matsushima
 * 検索
 *
 * Revision 1.9  2010/05/21 16:56:49  matsushima
 * ノードの共通化
 *
 * Revision 1.8  2010/05/19 14:59:02  matsushima
 * 字句解析定義を読み込み修正
 *
 * Revision 1.5  2010/05/14 18:42:42  matsushima
 * 構文解析とノード出力
 *
 * Revision 1.4  2010/05/13 13:41:14  matsushima
 * 構文解析定義読み込み
 *
 * Revision 1.3  2010/05/06 16:05:54  matsushima
 * 構文解析
 *
 * Revision 1.2  2010/05/05 15:25:20  matsushima
 * 構文解析完了
 *
 * Revision 1.1  2010/05/03 19:25:27  matsushima
 * 構文解析
 *
 */

RootDeclaration:
        CompilationUnit

TraceDeclaration:
        //QualifiedIdentifier
        _PackageDeclaration
        ImportDeclaration
//        TypeDeclaration
//        ClassOrInterfaceDeclaration
        Statement
//        ClassBodyDeclaration
//        MemberDecl
//        GenericMethodOrConstructorDecl
//        MethodOrFieldDecl
        VoidMethodDeclarator
//        Identifier ConstructorDeclaratorRest
        InterfaceDeclaration
        ClassDeclaration

Identifier:
        IDENTIFIER

QualifiedIdentifier:
        Identifier { . Identifier }

Literal:
        IntegerLiteral
        FloatingPointLiteral
        CharacterLiteral
        StringLiteral
        BooleanLiteral
        NullLiteral

Expression:
//        Expression1 [AssignmentOperator Expression1]]
        Expression1 [AssignmentOperator Expression1]

AssignmentOperator:
        =
        +=
        -=
        *=
        /=
        &=
        "|="
        ^=
        %=
        <<=
        >>=
        >>>=

Type:
        Identifier [TypeArguments] { . Identifier [TypeArguments]} {"[" "]"}
        BasicType

TypeArguments:
        < TypeArgument {, TypeArgument} >

TypeArgument:
        Type
        ? [( extends | super ) Type]

StatementExpression:
        Expression

ConstantExpression:
        Expression

Expression1:
        Expression2 [Expression1Rest]

Expression1Rest:
        ? Expression : Expression1

Expression2:
        Expression3 [Expression2Rest]

Expression2Rest:
        {InfixOp Expression3}
        Expression3 instanceof Type

InfixOp:
        "||"
        &&
        "|"
        ^
        &
        ==
        !=
        <
        >
        <=
        >=
        <<
        >>
        >>>
        +
        -
        *
        /
        %

Expression3:
        PrefixOp Expression3
        ( Expression | Type ) Expression3
        Primary {Selector} {PostfixOp}

Primary:
        ParExpression
        NonWildcardTypeArguments (ExplicitGenericInvocationSuffix | this Arguments)
        this [Arguments]
        super SuperSuffix
        Literal
        new Creator
        Identifier { . Identifier } [IdentifierSuffix]
        BasicType {"[" "]"} . class
        void . class

IdentifierSuffix:
//        [ ( ] {[]} .   class | Expression ])
        ["("] {"[" "]"} . (class | Expression) [")"]
        Arguments
        . ( class | ExplicitGenericInvocation | this | super Arguments | new [NonWildcardTypeArguments] InnerCreator )

ExplicitGenericInvocation:
        NonWildcardTypeArguments ExplicitGenericInvocationSuffix

NonWildcardTypeArguments:
        < TypeList >


ExplicitGenericInvocationSuffix:
        super SuperSuffix
        Identifier Arguments


PrefixOp:
        ++
        --
        !
        ~
        +
        -

PostfixOp:
        ++
        --

//Selector: Selector:
Selector:
        . Identifier [Arguments]
        . ExplicitGenericInvocation
        . this
        . super SuperSuffix
        . new [NonWildcardTypeArguments] InnerCreator
        "[" Expression "]"

BasicType:
        byte
        short
        char
        int
        long
        float
        double
        boolean

Arguments:
        "(" [Expression { , Expression }] ")"

Creator:
        [NonWildcardTypeArguments] CreatedName ( ArrayCreatorRest | ClassCreatorRest )

CreatedName:
        Identifier [NonWildcardTypeArguments] {. Identifier [NonWildcardTypeArguments]}

InnerCreator:
        Identifier ClassCreatorRest

ArrayCreatorRest:
//        [ ( ] {[]} ArrayInitializer | Expression ] {[ Expression ]} {[]} )
        ["("] {"[" "]"} [ ArrayInitializer | Expression ] {"[" Expression "]"} {"[" "]"} [")"]

ClassCreatorRest:
         Arguments [ClassBody]

ArrayInitializer:
        "{" [VariableInitializer {, VariableInitializer} [,]] "}"

VariableInitializer:
        ArrayInitializer
        Expression

ParExpression:
        "(" Expression ")"

Block:
        "{" BlockStatements "}"

BlockStatements:
        { BlockStatement }

BlockStatement:
        LocalVariableDeclarationStatement
        ClassOrInterfaceDeclaration
        [Identifier :] Statement

LocalVariableDeclarationStatement:
        [final] Type VariableDeclarators ;

Statement:
        Block
        assert Expression [ : Expression] ;
        if ParExpression Statement [else Statement]
        for "(" ForControl ")" Statement
        while ParExpression Statement
        do Statement while ParExpression ;
        try Block ( Catches | [Catches] finally Block )
        switch ParExpression "{" SwitchBlockStatementGroups "}"
        synchronized ParExpression Block
        return [Expression] ;
        throw Expression ;
        break [Identifier]
        continue [Identifier]
        ;
        StatementExpression ;
        Identifier : Statement

Catches:
        CatchClause {CatchClause}

CatchClause:
     catch "(" FormalParameter ")" Block

SwitchBlockStatementGroups:
        "{" SwitchBlockStatementGroup "}"

SwitchBlockStatementGroup:
        SwitchLabel BlockStatements

SwitchLabel:
        case ConstantExpression :
        case EnumConstantName :
        default ":"

MoreStatementExpressions:
        { , StatementExpression }

ForControl:
        ForVarControl
//        ForInit ; [Expression] ; [ForUpdate]
        [ForInit] ; [Expression] ; [ForUpdate]

ForVarControl:
        [final] [Annotations] Type Identifier ForVarControlRest

Annotations:
        Annotation [Annotations]

Annotation:
        @ TypeName ["(" [Identifier =] ElementValue")"]

ElementValue:
        ConditionalExpression
        Annotation
        ElementValueArrayInitializer

ConditionalExpression:
        Expression2 Expression1Rest

ElementValueArrayInitializer:
        "{" [ElementValues] [,] "}"

ElementValues:
        ElementValue [ElementValues]

ForVarControlRest:
        VariableDeclaratorsRest; [Expression] ; [ForUpdate]
        : Expression

ForInit:
//        StatementExpression Expressions
        StatementExpression

//
ForUpdate:
        StatementExpression

Modifier:
        Annotation
        public
        protected
        private
        static
        abstract
        final
        native
        synchronized
        transient
        volatile
        strictfp

VariableDeclarators:
        VariableDeclarator { , VariableDeclarator }

VariableDeclaratorsRest:
        VariableDeclaratorRest { , VariableDeclarator }

ConstantDeclaratorsRest:
        ConstantDeclaratorRest { , ConstantDeclarator }

VariableDeclarator:
        Identifier VariableDeclaratorRest

ConstantDeclarator:
        Identifier ConstantDeclaratorRest

VariableDeclaratorRest:
        {"[" "]"} [= VariableInitializer]

ConstantDeclaratorRest:
        {"[" "]"} = VariableInitializer

VariableDeclaratorId:
        Identifier {"[" "]"}

CompilationUnit:
//        [[Annotations] package QualifiedIdentifier ; ] {ImportDeclaration} {TypeDeclaration}
        [_PackageDeclaration] {ImportDeclaration} {TypeDeclaration}

_PackageDeclaration: [Annotations] package QualifiedIdentifier ;

ImportDeclaration:
        import [static] Identifier { . Identifier } [ . * ] ;

TypeDeclaration:
        ClassOrInterfaceDeclaration
        ;

ClassOrInterfaceDeclaration:
        {Modifier} (ClassDeclaration | InterfaceDeclaration)

ClassDeclaration:
        NormalClassDeclaration
        EnumDeclaration

NormalClassDeclaration:
        class Identifier [TypeParameters] [extends Type] [implements TypeList] ClassBody

TypeParameters:
        < TypeParameter {, TypeParameter} >

TypeParameter:
        Identifier [extends Bound]

Bound:
         Type {& Type}


EnumDeclaration:
        enum Identifier [implements TypeList] EnumBody

EnumBody:
        "{" [EnumConstants] [,] [EnumBodyDeclarations] "}"

EnumConstants:
        EnumConstant
        EnumConstants , EnumConstant

EnumConstant:
        Annotations Identifier [Arguments] [ClassBody]

EnumBodyDeclarations:
        ; {ClassBodyDeclaration}

InterfaceDeclaration:
        NormalInterfaceDeclaration
        AnnotationTypeDeclaration

NormalInterfaceDeclaration:
        interface Identifier [TypeParameters] [extends TypeList] InterfaceBody

TypeList:
        Type { , Type}

AnnotationTypeDeclaration:
        @ interface Identifier AnnotationTypeBody

AnnotationTypeBody:
        "{" [AnnotationTypeElementDeclarations] "}"

AnnotationTypeElementDeclarations:
        AnnotationTypeElementDeclaration
        AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration

AnnotationTypeElementDeclaration:
        {Modifier} AnnotationTypeElementRest

AnnotationTypeElementRest:
        Type Identifier AnnotationMethodOrConstantRest;
        ClassDeclaration
        InterfaceDeclaration
        EnumDeclaration
        AnnotationTypeDeclaration

AnnotationMethodOrConstantRest:
        AnnotationMethodRest
        AnnotationConstantRest

AnnotationMethodRest:
        "(" ")" [DefaultValue]

AnnotationConstantRest:
        VariableDeclarators


DefaultValue:
        default ElementValue

ClassBody:
        "{" {ClassBodyDeclaration} "}"

InterfaceBody:
        "{" {InterfaceBodyDeclaration} "}"

ClassBodyDeclaration:
        ;
        [static] Block
        {Modifier} MemberDecl

MemberDecl:
        GenericMethodOrConstructorDecl
        MethodOrFieldDecl
//        void Identifier VoidMethodDeclaratorRest
        VoidMethodDeclarator
        Identifier ConstructorDeclaratorRest
        InterfaceDeclaration
        ClassDeclaration
//
VoidMethodDeclarator:
        void Identifier VoidMethodDeclaratorRest

GenericMethodOrConstructorDecl:
        TypeParameters GenericMethodOrConstructorRest

GenericMethodOrConstructorRest:
        (Type | void) Identifier MethodDeclaratorRest
        Identifier ConstructorDeclaratorRest

MethodOrFieldDecl:
        Type Identifier MethodOrFieldRest

MethodOrFieldRest:
//        VariableDeclaratorRest
        VariableDeclaratorRest ;
        MethodDeclaratorRest

InterfaceBodyDeclaration:
        ;
        {Modifier} InterfaceMemberDecl

InterfaceMemberDecl:
        InterfaceMethodOrFieldDecl
        InterfaceGenericMethodDecl
        void Identifier VoidInterfaceMethodDeclaratorRest
        InterfaceDeclaration
        ClassDeclaration

InterfaceMethodOrFieldDecl:
        Type Identifier InterfaceMethodOrFieldRest

InterfaceMethodOrFieldRest:
        ConstantDeclaratorsRest ;
        InterfaceMethodDeclaratorRest

MethodDeclaratorRest:
        FormalParameters {"[" "]"} [throws QualifiedIdentifierList] ( MethodBody | ; )

VoidMethodDeclaratorRest:
        FormalParameters [throws QualifiedIdentifierList] ( MethodBody | ; )

InterfaceMethodDeclaratorRest:
        FormalParameters {"[" "]"} [throws QualifiedIdentifierList] ;

InterfaceGenericMethodDecl:
        TypeParameters (Type | void) Identifier InterfaceMethodDeclaratorRest

VoidInterfaceMethodDeclaratorRest:
        FormalParameters [throws QualifiedIdentifierList] ;

ConstructorDeclaratorRest:
        FormalParameters [throws QualifiedIdentifierList] MethodBody

QualifiedIdentifierList:
        QualifiedIdentifier { , QualifiedIdentifier}

FormalParameters:
        "(" [FormalParameterDecls] ")"

FormalParameterDecls:
        [final] [Annotations] Type [FormalParameterDeclsRest]

FormalParameterDeclsRest:
        VariableDeclaratorId [ , FormalParameterDecls]
        ... VariableDeclaratorId

MethodBody:
        Block

EnumConstantName:
        Identifier
