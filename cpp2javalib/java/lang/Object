/**
 * @file
 *
 * $Id: java.lang.Object,v 1.6 2008/03/11 16:57:48 matsushima Exp $
 *
 * java.lang.Object : 
 *
 * @author  0.0 2005/03/19 matsushima h2java
 * @author  0.1 2006/07/20 matsushima cpp2javalib
 * @version $Revision: 1.6 $
 * @since   0.0 2005/03/19 matsushima h2java
 *
 * $Log: java.lang.Object,v $
 * Revision 1.6  2008/03/11 16:57:48  matsushima
 * ÉXÉåÉbÉhìØä˙ Object.wait(), notify()
 *
 * Revision 1.5  2007/11/30 22:42:27  matsushima
 * çƒìoò^
 *
 * Revision 1.4  2007/05/14 13:38:09  matsushima
 * Java/C++ ã§í âª
 *
 * Revision 1.3  2007/05/14 05:21:53  matsushima
 * no message
 *
 * Revision 1.2  2007/05/10 14:31:24  matsushima
 * operator T&()
 *
 * Revision 1.1.1.1  2006/08/17 20:26:00  matsushima
 * new
 *
 */

#ifndef _JAVA_LANG_OBJECT_
#define _JAVA_LANG_OBJECT_

#include "../../cpp2javalib.h"

/*------------------------------------------------------------*/

struct _OBJSTACK;
typedef struct _OBJSTACK OBJSTACK;

class String;

class Object
{
protected:
    static OBJSTACK objstack;
    Object();
    void* event;
public:
    virtual ~Object();
    virtual String toString();
    void init_event(boolean initial);
    void term_event();
    static void term_events();
    void wait();
    void notify();
public:
    // C++
    virtual operator const char*();
    String operator+(const char* value);
    String operator+(int value);
    String operator+(long value);
    String operator+(unsigned short value);
    String operator+(double value);
    String operator+(bool value);
public:
    bool refer();
    bool release();
    void outref(const char* m);
private:
    int refcnt;
};

// "abc" + s
String operator+(const char* str, Object& value);

/*------------------------------------------------------------*/

#endif /* #ifndef _JAVA_LANG_OBJECT_ */
